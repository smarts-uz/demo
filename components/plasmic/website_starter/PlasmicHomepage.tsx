// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tCfLmaaHRZLhqCMNBDT3fx
// Component: 5h393F7B23DL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: cAZ7Fyj9SuEu/component
import Clubs from "../../Clubs"; // plasmic-import: QoZM5zX7KRbO/component
import SignInButtons from "../../SignInButtons"; // plasmic-import: PRwlDeJ3genv/component
import SearchComponent from "../../SearchComponent"; // plasmic-import: RmOl_nf2lHTZ/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowImage } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import MatchesCalendar from "../../MatchesCalendar"; // plasmic-import: FvqZ6jZ3Nmz6/component
import Footer from "../../Footer"; // plasmic-import: cx6aWNqCuwPL/component

import { useScreenVariants as useScreenVariantsdXwyGmjSdG } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -d_XWYGmjSdG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tCfLmaaHRZLhqCMNBDT3fx/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 5h393F7B23DL/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  clubs?: Flex__<typeof Clubs>;
  heroSection?: Flex__<"div">;
  signIn?: Flex__<"div">;
  h4?: Flex__<"h4">;
  h2?: Flex__<"h2">;
  signInButtons?: Flex__<typeof SignInButtons>;
  searchComponent?: Flex__<typeof SearchComponent>;
  breakingNews?: Flex__<"div">;
  breakingNewsSection?: Flex__<"div">;
  news?: Flex__<"div">;
  matchesCalendar?: Flex__<typeof MatchesCalendar>;
  columns?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdXwyGmjSdG()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Clubs
            data-plasmic-name={"clubs"}
            data-plasmic-override={overrides.clubs}
            className={classNames("__wab_instance", sty.clubs)}
          />

          <div
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames(projectcss.all, sty.heroSection)}
          >
            <div
              data-plasmic-name={"signIn"}
              data-plasmic-override={overrides.signIn}
              className={classNames(projectcss.all, sty.signIn)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__icrRl
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Play the only"}
                    </h4>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rS2Sd
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___0LWm
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h2
                            data-plasmic-name={"h2"}
                            data-plasmic-override={overrides.h2}
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-jgohepLVeKvh)" }}
                              >
                                {"LALIALIGA"}
                              </span>
                              <React.Fragment> </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#FF4844" }}
                              >
                                {"FANTASY"}
                              </span>
                              <React.Fragment>{"\n "}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-jgohepLVeKvh)" }}
                              >
                                {"game"}
                              </span>
                            </React.Fragment>
                          </h2>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </h3>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <SignInButtons
                data-plasmic-name={"signInButtons"}
                data-plasmic-override={overrides.signInButtons}
                className={classNames("__wab_instance", sty.signInButtons)}
              />
            </div>
          </div>
          <SearchComponent
            data-plasmic-name={"searchComponent"}
            data-plasmic-override={overrides.searchComponent}
            className={classNames("__wab_instance", sty.searchComponent)}
          />

          <div
            data-plasmic-name={"breakingNews"}
            data-plasmic-override={overrides.breakingNews}
            className={classNames(projectcss.all, sty.breakingNews)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cSwL
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__smrsM
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-jgohepLVeKvh)" }}
                      >
                        {"Breaking News"}
                      </span>
                      <React.Fragment> </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FF4844" }}
                      >
                        {"Fantasy"}
                      </span>
                    </React.Fragment>
                  </h3>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"breakingNewsSection"}
            data-plasmic-override={overrides.breakingNewsSection}
            className={classNames(projectcss.all, sty.breakingNewsSection)}
          >
            <div
              data-plasmic-name={"news"}
              data-plasmic-override={overrides.news}
              className={classNames(projectcss.all, sty.news)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ijLop
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__esAer
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-jgohepLVeKvh)" }}
                        >
                          {"Latest News"}
                        </span>
                      </React.Fragment>
                    </h3>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__getwh)}>
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher__nnQ4
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__usFf6
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  fields={["title", "description", "img"]}
                  filterField={"title"}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vsOWo
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={true}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___79O5Z
                        )}
                      >
                        <CmsRowImage
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryImage__bhb3J
                          )}
                          srcProp={"src"}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__jt6Zp)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            height={"120px"}
                            src={
                              "https://studio.plasmic.app/static/img/placeholder-full.png"
                            }
                            width={"120px"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vhVpj
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField___9BYdg
                              )}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__hcTm3
                              )}
                              field={"description"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              usePlasmicTheme={false}
                            />
                          </div>
                        </CmsRowImage>
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7Vn6L)}>
                <CmsQueryRepeater
                  className={classNames(
                    "__wab_instance",
                    sty.cmsDataFetcher__aay1H
                  )}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o6Hq
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  fields={["description", "title", "img"]}
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dPdpy
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={false}
                  table={"breakingNewsMini"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wUu9V
                        )}
                      >
                        <CmsRowImage
                          className={classNames(
                            "__wab_instance",
                            sty.cmsEntryImage__dn6R2
                          )}
                          srcProp={"src"}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__aJynm)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "180px"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "portrait"
                                  )
                                ? "100%"
                                : "200px"
                            }
                            src={
                              "https://studio.plasmic.app/static/img/placeholder-full.png"
                            }
                            width={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ``
                                : "120px"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gWoRb
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__qqNnm
                              )}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__juZmX
                              )}
                              field={"description"}
                              themeResetClassName={classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                            />
                          </div>
                        </CmsRowImage>
                      </div>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zVdDa)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3___3OCph
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "var(--token-jgohepLVeKvh)" }}
                  >
                    {"Matches Calendar"}
                  </span>
                </React.Fragment>
              </h3>
              <MatchesCalendar
                data-plasmic-name={"matchesCalendar"}
                data-plasmic-override={overrides.matchesCalendar}
                className={classNames("__wab_instance", sty.matchesCalendar)}
              />
            </Stack__>
          </div>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__yPNc3)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__tkH
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {"See all the news"}
              </PlasmicLink__>
            </div>
            <div className={classNames(projectcss.all, sty.column__nqRy2)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__veAid
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {"All matches"}
              </PlasmicLink__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___00Hh)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wkUte
              )}
            >
              {"Stats"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pa5Qv
              )}
            >
              {"Fantasy"}
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "clubs",
    "heroSection",
    "signIn",
    "h4",
    "h2",
    "signInButtons",
    "searchComponent",
    "breakingNews",
    "breakingNewsSection",
    "news",
    "matchesCalendar",
    "columns",
    "footer"
  ],
  navbar: ["navbar"],
  clubs: ["clubs"],
  heroSection: ["heroSection", "signIn", "h4", "h2", "signInButtons"],
  signIn: ["signIn", "h4", "h2", "signInButtons"],
  h4: ["h4"],
  h2: ["h2"],
  signInButtons: ["signInButtons"],
  searchComponent: ["searchComponent"],
  breakingNews: ["breakingNews"],
  breakingNewsSection: ["breakingNewsSection", "news", "matchesCalendar"],
  news: ["news"],
  matchesCalendar: ["matchesCalendar"],
  columns: ["columns"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  clubs: typeof Clubs;
  heroSection: "div";
  signIn: "div";
  h4: "h4";
  h2: "h2";
  signInButtons: typeof SignInButtons;
  searchComponent: typeof SearchComponent;
  breakingNews: "div";
  breakingNewsSection: "div";
  news: "div";
  matchesCalendar: typeof MatchesCalendar;
  columns: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    clubs: makeNodeComponent("clubs"),
    heroSection: makeNodeComponent("heroSection"),
    signIn: makeNodeComponent("signIn"),
    h4: makeNodeComponent("h4"),
    h2: makeNodeComponent("h2"),
    signInButtons: makeNodeComponent("signInButtons"),
    searchComponent: makeNodeComponent("searchComponent"),
    breakingNews: makeNodeComponent("breakingNews"),
    breakingNewsSection: makeNodeComponent("breakingNewsSection"),
    news: makeNodeComponent("news"),
    matchesCalendar: makeNodeComponent("matchesCalendar"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
